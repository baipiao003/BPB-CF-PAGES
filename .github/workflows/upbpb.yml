# 工作流名称
name: Update BPB-Worker-Panel

on:
  schedule:
    - cron: '0 2 * * *' # 每天 UTC 时间 03:00 运行（北京时间 11:00）
  workflow_dispatch: # 允许手动触发该工作流

jobs:
  update-worker-js:
    runs-on: ubuntu-latest # 使用最新 Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 拉取当前仓库代码

      - name: Get latest release info with worker.js
        id: get_release
        env:
          GITHUB_TOKEN: ${{ github.token }} # 将 token 传入环境变量以供 gh CLI 使用
        run: |
          set -e
          echo "Fetching latest release with worker.js using gh CLI..."

          # 使用 gh CLI (更现代、更简洁) 进行认证的 API 请求
          asset_info=$(gh api "repos/bia-pain-bache/BPB-Worker-Panel/releases" --jq '
            map(
              select((.assets | map(.name) | index("worker.js")) != null)
              | {
                  version: .tag_name,
                  url: (.assets[] | select(.name == "worker.js") | .browser_download_url),
                  published: .published_at
                }
            )[0] | @base64'
          )

          # 增加对 API 调用失败或未找到文件时返回 null 的判断
          # 'bnVsbA==' 是 'null' 的 Base64 编码
          if [ -z "$asset_info" ] || [ "$asset_info" == "bnVsbA==" ]; then
            echo "Error: worker.js not found in any release or API call failed"
            exit 1
          fi

          # 解码函数保持不变
          decode() {
            echo "$asset_info" | base64 --decode | jq -r "$1"
          }

          asset_url=$(decode '.url')
          version=$(decode '.version')
          published_at=$(decode '.published')

          # 将结果输出给后续步骤使用
          echo "asset_url=$asset_url" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "published_at=$published_at" >> $GITHUB_OUTPUT

      - name: Download worker.js and add version header
        run: |
          echo "Downloading from ${{ steps.get_release.outputs.asset_url }}"
          curl -s --retry 3 --retry-delay 2 -L "${{ steps.get_release.outputs.asset_url }}" -o temp_worker.js
          {
            echo "// 版本: ${{ steps.get_release.outputs.version }}"
            echo "// 发布时间: ${{ steps.get_release.outputs.published_at }}"
            cat temp_worker.js
          } > _worker.js
          rm temp_worker.js

      - name: Check for changes or new file
        id: check_changes
        run: |
          # 此步骤无需更改，逻辑正确
          if [ ! -f _worker.js ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 使用 git status --porcelain 可以更简洁地检查是否有变更
          if git status --porcelain _worker.js | grep -qE '^( M| A)'; then
            echo "File _worker.js has changes."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in _worker.js."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add _worker.js
          git commit -m "同步更新 _worker.js ${{ steps.get_release.outputs.version }} (发布于 ${{ steps.get_release.outputs.published_at }})"
          git push

      - name: 🎉 Delete old workflow runs
        uses: yxdz2020/delete-workflow-runs@v20250609
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 50
